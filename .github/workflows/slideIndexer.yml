on: [push]

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    name: Build and deploy angular ui
    steps:
      - name: Check out the repository to the runner
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.17.1'

      - name: Install dependencies
        run: npm install

      - name: Update environments.ts with secrets
        env:
          RECEIPPT_API_URL: ${{ secrets.RECEIPPT_API_URL }}
          RECEIPPT_API_INDEX_ENDPOINT: ${{ secrets.RECEIPPT_API_INDEX_ENDPOINT }}
          RECEIPPT_API_DOWNLOAD_ENDPOINT: ${{ secrets.RECEIPPT_API_DOWNLOAD_ENDPOINT }}
        run: node config-environment.js RECEIPPT_API_URL RECEIPPT_API_INDEX_ENDPOINT RECEIPPT_API_DOWNLOAD_ENDPOINT

      - name: Build ui
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      - name: Deploy build to S3 static website endpoint
        run: aws s3 sync dist/receippt-frontend/ s3://${{ secrets.RECEIPPT_UI_S3_BUCKET}} --follow-symlinks  --delete
 
  index_database:
    name: Slides Indexer
    outputs:
      latest_sha: ${{ steps.sha.outputs.latest_sha }}
      is_index_modified: ${{ steps.push-index.outputs.is_index_modified }}

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./database
    steps:
      - name: Check out the repository to the runner
        uses: actions/checkout@v4 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r scripts/requirements.txt
        
      - name: Run indexer script
        run: python scripts/__indexer.py
      
      - name: Push Index Changes
        id: push-index
        run: |
          git config --local user.name "${GITHUB_ACTOR}"
          git config --local user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"

          git add .
          echo "is_index_modified=false" >> $GITHUB_OUTPUT

          if [[ -n "$(git diff --name-only --diff-filter=AM --staged)" ]];
          then
            echo "is_index_modified=true" >> $GITHUB_OUTPUT
            git commit -am "Slides Indexer [GITHUB ACTION]"
            git push  -f origin main
          fi

      - name: get sha
        id: sha
        run: |
            sha_new=$(git rev-parse HEAD)
            echo $sha_new
            echo "latest_sha=$sha_new" >> $GITHUB_OUTPUT
 
  deploy_backend:
    name: Deploy api and database to ec2
    needs: [index_database]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository to the runner
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.index_database.outputs.latest_sha }}
          fetch-depth: 0

      - name: Set up JDK 17 for x64
        uses: actions/setup-java@v4
        with:
            java-version: '17'    
            distribution: 'corretto'

      - name: Create receippt-api.jar 
        working-directory: ./backend
        run: mvn clean package

      - name: Check if receippt-api.jar is built
        id: check_jar_built
        uses: andstor/file-existence-action@v3
        with:
          files: 'backend/target/receippt-api.jar'
          fail: true

      - name: Install java in ec2 server
        if: steps.check_jar_built.outputs.files_exists == 'true'
        env:
          HOSTNAME: ${{secrets.EC2_SERVER_HOSTNAME}}
          PRIVATE_KEY: |
            ${{ secrets.EC2_SERVER_PEM }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@${HOSTNAME} '
            pwd
            ls
            if [ -x "$(command -v java)" ]; then
              echo "Java is already installed. Version information:"
              java -version
            else
              echo "Java is not installed."
              sudo yum install java-17-amazon-corretto
            fi
            ' 

      - name: Stop existing process in ec2 server
        if: steps.check_jar_built.outputs.files_exists == 'true'
        env:
          HOSTNAME: ${{secrets.EC2_SERVER_HOSTNAME}}
          PRIVATE_KEY: |
            ${{ secrets.EC2_SERVER_PEM }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@${HOSTNAME} '
            JAR_FILE="receippt-api.jar"
            PID=$(pgrep -f "[j]ava -jar $JAR_FILE" | head -n 1)
            if [ -n "$PID" ]; then
              echo "$PID"
              echo "Stopping process with PID $PID"
              kill "$PID"
            else
              echo "No process found running for $JAR_FILE"
            fi
          '
    
      - name: Create directory in ec2 server
        if: steps.check_jar_built.outputs.files_exists == 'true'
        env:
          HOSTNAME: ${{secrets.EC2_SERVER_HOSTNAME}}
          PRIVATE_KEY: |
            ${{ secrets.EC2_SERVER_PEM }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@${HOSTNAME} '
            directory="receippt"
            if [ -d "$directory" ]; then
              rm -rf "$directory"/*
              echo "Contents of $directory removed."
            else
              echo "Directory $directory does not exist. Creating..."
              mkdir -p "$directory"
              echo "Directory $directory created."
            fi
            ls
            '

      - name: Upload new artifacts to server directory
        if: steps.check_jar_built.outputs.files_exists == 'true'
        env:
          HOSTNAME: ${{secrets.EC2_SERVER_HOSTNAME}}
          PRIVATE_KEY: |
            ${{ secrets.EC2_SERVER_PEM }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -i private_key -r ./backend/target/receippt-api.jar ec2-user@${HOSTNAME}:/home/ec2-user/receippt/
          scp -i private_key -r ./database/ ec2-user@${HOSTNAME}:/home/ec2-user/receippt/database/

      - name: Start jar in ec2 server
        if: steps.check_jar_built.outputs.files_exists == 'true'
        env:
          HOSTNAME: ${{secrets.EC2_SERVER_HOSTNAME}}
          PRIVATE_KEY: |
            ${{ secrets.EC2_SERVER_PEM }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@${HOSTNAME} '
            cd receippt
            nohup java -jar receippt-api.jar --local.database.path=./database > receippt-api.log 2>&1 &
            echo $!
            exit
          '
